#!/usr/bin/python

import sys, os, csv, argparse

MTURK_TOOL_DIR = '/home/wjj/Dropbox/Work/mTurk/aws-mturk-clt-1.3.1/bin/'

os.system('export JAVA_HOME=/usr')

def make_parser():

    parse = argparse.ArgumentParser(description='bonus mturk participants based'
                                    ' on a batch file and an optional'
                                    ' cross-reference file for a specified'
                                    ' and with a specified amount')
    parse.add_argument('batch', help='path to the mTurk batch file from the task')
    parse.add_argument('amount', help='amount to bonus each worker')
    parse.add_argument('reason', help='the reason for the bonus')
    parse.add_argument('-c', '--cross_reference', help='a csv with a column'
                       ' headed by the word mturk that consists of mTurk IDs'
                       ', only IDs in both that column and the source file will'
                       ' be bonused', default=False)
    parse.add_argument('-m', '--mturk_tool_dir', help='path to your mTurk tools'
                       ' directory (there is a default, but it is likely'
                       ' not helpful)', default=MTURK_TOOL_DIR)
    parse.add_argument('-t', '--test', help='do not issue bonuses, just print'
                       ' text of bonuses that would be issued', default=False,
                       action='store_true')

    return parse

def get_column_vals(file_, heads):
    dicvals = {}
    with open(file_, 'rU') as cr:
        creader = csv.reader(cr)
        for i, row in enumerate(creader):
            head_is = {}
            for head in heads:
                if i == 0:
                    try:
                        head_i = row.index(head)
                    except:
                        raise IOError('No '+head+' column in cross-reference'
                                      ' file')
                    else:
                        dicvals[head] = []
                else:
                    dicvals[head].append(row[head_is[head]])
            
    return dicvals

def compose_bonus(wid, amount, reason, assign):
    
    return ('./grantBonus.sh -workerid ' + wid + ' -amount ' + amount + 
            ' -assignment ' + assign + ' -reason "' + reason + '"')


if __name__ == '__main__':

    parser = make_parser()
    args = parser.parse_args()

    if args.cross_reference:
        cross_refs = get_column_vals(args.cross_reference, ['mturk'])
        cross_refs = cross_refs['mturk']

    with open(args.source, 'rU') as source:
        # set up for bonuses
        os.chdir(args.mturk_tool_dir)

        done = 0 # keep track of how many bonuses
        # get ids and assign values
        ids_and_assigns = get_column_vals(source, ['AssignmentId',
                                                   'WorkerId'])
    
    for worker in enumerate(ids_and_assigns['WorkerId']):
        if not args.cross_reference or worker in cross_refs:
            bonus_text = compose_bonus(worker, args.amount, args.reason,
                                       ids_and_assigns['AssignmentId'])
            if not args.test:
                os.system(bonus_text)
            else:
                print 'Test: ' + bonus_text
            done += 1

    print ("Bonused " + str(done) + " turkers " + str(args.amount) + 
           " dollar each, because " + args.reason)

    sys.exit(0)
